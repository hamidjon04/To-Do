definitions:
  models.CreateToDoReq:
    properties:
      description:
        type: string
      titile:
        type: string
      user_id:
        type: integer
    type: object
  models.CreateUserReq:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  models.DeleteToDoReq:
    properties:
      id:
        type: integer
      userID:
        type: integer
    type: object
  models.ErrorResponse:
    properties:
      error:
        description: Error message
        type: string
    type: object
  models.LoginReq:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.Todo:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      isCompleted:
        type: boolean
      title:
        type: string
      updatedAt:
        type: string
      userID:
        type: integer
    type: object
  models.UpdateToDoReq:
    properties:
      description:
        type: string
      id:
        type: integer
      isCompleted:
        type: boolean
      title:
        type: string
      userId:
        type: integer
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        description: hashed password
        type: string
    type: object
info:
  contact: {}
  description: API for managing ToDo tasks with user authentication.
  title: ToDo API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: User logs in with their email and password
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login user
  /register:
    post:
      consumes:
      - application/json
      description: Create a new user with name, email, and password
      parameters:
      - description: Create User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
  /todos:
    delete:
      consumes:
      - application/json
      description: Delete a ToDo by ID and User ID
      parameters:
      - description: Delete ToDo
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/models.DeleteToDoReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
    get:
      consumes:
      - application/json
      description: Get all ToDos for a specific user by user ID
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Todo'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
    post:
      consumes:
      - application/json
      description: Create a new ToDo with title, description, and user ID
      parameters:
      - description: Create ToDo
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/models.CreateToDoReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Todo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
    put:
      consumes:
      - application/json
      description: Update the title, description, and completion status of a ToDo
      parameters:
      - description: Update ToDo
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/models.UpdateToDoReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and your JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
